#!/usr/bin/env python3

import sys
import os
import re
import urllib.request
from optparse import OptionParser

# Program Information
program_name = 'getyoutube'
program_version = '0.1'

class getyoutube:
    def __init__(self, addr):
        '''
        Initialize and parse video information
        '''
        # Title replacement strings
        xmlrp = [ (' ', '_'), ('&quot;', '"'), ('&lt;', '<'), ('&gt;', '>') ]
        urllib.request.urlcleanup()
        try:
            data = str(urllib.request.urlopen(addr).read())
        except ValueError as e:
            print('error:', e)
            sys.exit(1)

        try:
            # address
            self.address = addr
            # id
            self.id = re.search('(?<=v=)[^&]*', addr).group(0)
            # t
            self.t = re.search('(?<="t": ").{46}', data).group(0)
            # title
            self.title = re.search('(?<=title=")[^"]*"', data).group(0)
            self.title = self.title.strip('"')
        except AttributeError:
            print('\nerror: some error occured, please retry.')
            sys.exit(1)

        # outfile
        self.outfile = self.title
        for x, y in xmlrp:
            self.outfile = self.outfile.replace(x, y)
        # url
        self.url = 'http://www.youtube.com/get_video?video_id=' + self.id +\
                '&t=' + self.t
        # fmt
        self.fmt = {'FLV': (0, 'flv'), '3GP': (17, '3gp'), 'MP4': (18, 'mp4'),
                'MP4-720p': (22, 'mp4'), 'MP4-1080p': (37, 'mp4')}
        if data.find('22%2F2000000%') == -1:
            self.fmt['MP4-720p'] = (-1, 'mp4')
        if data.find('37%2F4000000%2F9%2F0%2F115') == -1: 
            self.fmt['MP4-1080p'] = (-1, 'mp4')

    def show(self):
        '''
        Show video information
        '''
        print('-' * 79)
        print('Title:', self.title)
        print('Video ID:', self.id)
        print('Video key:', self.t)
        print('-' * 79)
        print('Available formats:')
        count = 0
        avail = []
        for key, value in self.fmt.items():
            if value[0] != -1:
                print('{0}. {1}'.format(count + 1, key))
                avail.append(key)
                count += 1
        print('-' * 79)
        return count, avail

    def download(self, fmt):
        '''
        Start download
        '''
        if self.fmt[fmt][0] == -1 or fmt not in self.fmt:
            print('{0} is not available for this video!'.format(fmt))
            sys.exit(1)

        wget_str = "wget '" + self.url

        if fmt != 'FLV':
            wget_str += '&fmt=' + str(self.fmt[fmt][0])

        wget_str += "'" + " -O '" + self.outfile + '.' + self.fmt[fmt][1] + "'"

        # call wget
        os.system(wget_str)

def version():
    sys.stderr.write(
'{0} Ver {1}\n\
Copyright (C) 2010 Aitjcize (Wei-Ning Huang)\n\
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\n\
There is NO WARRANTY, to the extent permitted by law.\n\n\
Written by Aitjcize (Wei-Ning Huang).\n'
    .format(program_name, program_version))

def interactive(address, format):
    gt = getyoutube(address)
    total, avail = gt.show()

    choice = 0
    try:
        while choice <= 0 or choice > total:
            choice = int(input('Choose a format: '))
    except (KeyboardInterrupt, ValueError):
        print('\nAbort.')
        sys.exit(1)

    gt.download(avail[choice -1])


def main():
    '''
    main fucntion
    '''
    # parse option
    parser = OptionParser(usage = 'Usage: getyoutube [options] [urls]')
    parser.add_option('-v', '--version', action = 'store_true',
            dest = 'version', default = False,
            help = 'Show version information')
    parser.add_option('-i', '--interactive', action = 'store_true',
            dest = 'interactive', default = False, help = 'Interactive mode')
    parser.add_option('-f', action = 'store', type = 'string',
            dest = 'format', default = 'MP4', help = 'Select download format. \
FORMAT can be FLV, 3GP, MP4, MP4-720p, MP4-1080p, default MP4.')

    options, args = parser.parse_args()

    if options.version:
        version()
        sys.exit(0)

    # check
    if len(args) == 0:
        print('error: no address specified.')
        sys.exit(1)

    format = options.format

    for address in args:
        if options.interactive:
            interactive(address, format)
        else:
            gt = getyoutube(address)
            gt.download(format)

if __name__ == '__main__':
    main()
